{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenue","text":"<p>Ce site regroupe des documentations ainsi que des cheatsheets. C'est un r\u00e9ferentiel que j'utilise lorsque je dois prendre des notes concernant une technologie ou un concept que je veux apprendre.</p>"},{"location":"#contribution","title":"Contribution","text":"<p>Pour le moment, je n'autorise pas les contributions externes car l'objectif n'est pas de cr\u00e9er un second wikip\u00e9dia. De plus, je risque de me perdre dans les sujets.</p> <p>C'est accesible \u00e0 tous dans l'unique int\u00e9r\u00eat que je puisse consulter le site depuis n'importe o\u00f9.</p>"},{"location":"environnement-de-travail/terminal/","title":"Terminal","text":""},{"location":"environnement-de-travail/terminal/#configurer-zsh-sur-linux","title":"Configurer ZSH sur linux","text":"<p>ZSH est un interpr\u00e9teur de commande tout comme Bash. Il permet d'aller plus vite gr\u00e2ce \u00e0 des raccourcis de commandes que nous pouvons obtenir avec les plugins oh-my-zsh.</p> <p>Il faut en premier lieu installer zsh:</p> <pre><code>sudo apt install zsh\n</code></pre> <p>Une fois install\u00e9, nous pouvons installer oh-my-zsh depuis le r\u00e9pertoire GitHub:</p> <pre><code>sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n</code></pre> <p>Passons maintenant \u00e0 la configuration. Il existe de nombreuses configurations et plugins \u00e0 disposition. Vous pouvez les retrouver sur la documentation officielle de oh-my-zsh.</p> <p>Le fichier o\u00f9 est persist\u00e9 la configuration se trouve \u00e0 cet endroit: <code>$HOME/.zshrc</code> Si vous ne savez pas par o\u00f9 commencer, voici ma configuration que j'utilise au quotidien:</p> <pre><code># global environmental variables\n\nexport LANG=fr_FR.UTF-8\nexport USR_LOCAL=\"/usr/local\"\nexport ZSH=\"$HOME/.oh-my-zsh\"\nexport ANDROID_HOME=\"$HOME/Android/Sdk\"\nexport NVM_DIR=\"$HOME/.nvm\"\nexport SDKMAN_DIR=\"$HOME/.sdkman\"\nexport GO_DIR=\"$USR_LOCAL/go\"\nexport JAVA_HOME=\"$HOME/.sdkman/candidates/java/current\"\nexport HOME_LOCAL=\"$HOME/.local\"\nexport PYENV_DIR=\"$HOME/.pyenv\"\nexport DART_CACHE_DIR=\"$HOME/.pub-cache\"\n\nexport PATH=$JAVA_HOME/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools/bin:$HOME/bin:$HOME_LOCAL/bin:$USR_LOCAL/bin:$GO_DIR/bin:$DART_CACHE_DIR/bin:$PYENV_DIR/bin:$PATH\n\n# ohmyzsh configurations\n\nVSCODE=code # use \"snap install code --classic\" to install visual studio code\nZSH_THEME=\"nicoulaj\"\nDISABLE_MAGIC_FUNCTIONS=\"true\"\nCOMPLETION_WAITING_DOTS=\"true\"\n\nZSH_WEB_SEARCH_ENGINES=(\n    github \"https://github.com/search?q=\"\n    stackoverflow \"https://stackoverflow.com/search?q=\"\n    google \"https://www.google.com/search?q=\"\n)\n\nplugins=(\n  git # https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git\n  python # https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/python\n  sudo # https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/sudo\n  adb # https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/adb\n  gitignore # https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/gitignore\n  flutter # https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/flutter\n  vscode # https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/vscode\n  kubectl # https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/kubectl\n  web-search # https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/web-search\n)\n\n\n# custom commands\n\nalias adb_show_layoutbounds='adb shell setprop debug.layout true ; adb shell service call activity 1599295570'\nalias adb_hide_layoutbounds='adb shell setprop debug.layout false ; adb shell service call activity 1599295570'\nalias adb_show_nav='adb shell settings put global policy_control null'\nalias adb_hide_nav='adb shell settings put global policy_control immersive.status=com.package1,com.package2:immersive.navigation=apps,-com.package3'\nalias adb_shutdown='adb shell reboot -p'\nalias adb_go_settings='adb shell am start -a android.settings.SETTINGS'\nalias adb_go_home='adb shell am start -a android.intent.action.MAIN -c android.intent.category.HOME'\nalias adb_go_wifi='adb shell am start -a android.intent.action.MAIN -n com.android.settings/.wifi.WifiSettings'\n\n\ninit_pyenv () {\n    eval \"$(pyenv init -)\"\n    eval \"$(pyenv virtualenv-init -)\"\n}\n\n# Loading configurations\n\n[ -s \"$HOME/.config/envman/load.sh\" ] &amp;&amp; source \"$HOME/.config/envman/load.sh\"\n[ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\n[ -s \"$NVM_DIR/bash_completion\" ] &amp;&amp; \\. \"$NVM_DIR/bash_completion\"  # This loads nvm bash_completion\n[[ -s \"$HOME/.sdkman/bin/sdkman-init.sh\" ]] &amp;&amp; source \"$HOME/.sdkman/bin/sdkman-init.sh\"\n\nsource $ZSH/oh-my-zsh.sh\nsource &lt;(kubectl completion zsh)\n\n</code></pre> <p>Vous pouvez la copier ou vous en inspirer pour cr\u00e9er la votre. Une fois modifi\u00e9, il ne faut pas oublier de recharger l'interpr\u00e9teur actuel avec <code>source ~/.zshrc</code>, ou de tout simplement red\u00e9marrer le terminal.</p>"},{"location":"environnement-de-travail/vscode/","title":"Visual Studio Code","text":"<p>Il est possible de facilement configurer l'environnement avec seulement un seul fichier. Ce fichier JSON doit avoir finir par l'extension <code>&lt;my_workspace&gt;.code-workspace</code> afin d'\u00eatre reconnu par l'\u00e9diteur.</p>"},{"location":"environnement-de-travail/vscode/#environnement-de-travail-multi-repo","title":"Environnement de travail multi-repo","text":"<p>Au sein m\u00eame du fichier, il faut ins\u00e9rer sous la cl\u00e9 <code>folders</code>, les dossiers des multiples projets utilis\u00e9s dans votre environnement de travail. Voici un exemple:</p> <pre><code>{\n  \"folders\": [\n    {\n      \"name\": \"Backend\",\n      \"path\": \"back-end-folder-name\"\n    },\n    {\n      \"name\": \"Frontend\",\n      \"path\": \"front-end-folder-name\"\n    },\n  ]\n}\n</code></pre> <p>L'id\u00e9al est d'avoir les dossiers des multiples projets sous un m\u00eame dossier parent lorsque vous les cloner, afin de faciliter la configuration.</p>"},{"location":"environnement-de-travail/vscode/#automatisation-des-actions","title":"Automatisation des actions","text":"<p>TODO</p>"},{"location":"environnement-de-travail/vscode/#configuration-du-mode-debug","title":"Configuration du mode debug","text":"<p>TODO</p>"},{"location":"environnement-de-travail/vscode/#configuration-generales-de-lediteur","title":"Configuration g\u00e9n\u00e9rales de l'\u00e9diteur","text":"<p>TODO</p>"},{"location":"environnement-de-travail/vscode/#extensions","title":"Extensions","text":"<p>TODO</p>"},{"location":"platform-engineering/ansible/","title":"Ansible","text":"<p>TODO</p>"},{"location":"platform-engineering/aws/","title":"AWS","text":"<p>TODO</p>"},{"location":"platform-engineering/docker/","title":"Docker","text":"<p>TODO</p>"},{"location":"platform-engineering/gitlab/","title":"Gitlab","text":"<p>TODO</p>"},{"location":"platform-engineering/gitlab/#integration-continue-avec-gitlab-ci","title":"Int\u00e9gration continue avec Gitlab CI","text":"<p>TODO</p>"},{"location":"platform-engineering/gitlab/#deploiement-continue-de-documentation-avec-gitlab-pages","title":"D\u00e9ploiement continue de documentation avec Gitlab Pages","text":"<p>TODO</p>"},{"location":"platform-engineering/gitlab/#hebergement-de-livrables-docker-avec-gitlab-registry","title":"H\u00e9bergement de livrables docker avec Gitlab Registry","text":"<p>TODO</p>"},{"location":"platform-engineering/terraform/","title":"Terraform","text":"<p>TODO</p>"},{"location":"protocols/adb/","title":"Android Debug Bridge (ADB)","text":"<p>TODO</p>"},{"location":"protocols/http3/","title":"HTTP/3","text":"<p>TODO</p>"},{"location":"protocols/websocket/","title":"Websockets","text":"<p>TODO</p>"},{"location":"software-architecture/event-driven-development/","title":"Event driven development","text":""}]}